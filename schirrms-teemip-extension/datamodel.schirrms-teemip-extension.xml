<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.7">
	<constants>
	</constants>
	<classes>
		<!-- technically a clone of lnkIPInterfaceToIPAddress -->
		<class id="lnkGenericCommInterfaceToIPAddress" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<is_link>1</is_link>
				<category>bizmodel,ipmgmt</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>lnkgenericcomminterfacetoipaddress</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<format>%1$s %2$s</format>
					<attributes>
						<attribute id="ipinterface_id"/>
						<attribute id="ipaddress_id"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="ipinterface_id"/>
						<attribute id="ipaddress_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="ipinterface_id" xsi:type="AttributeExternalKey">
					<sql>ipinterface_id</sql>
					<target_class>GenericCommInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<jointype/>
				</field>
				<field id="ipinterface_name" xsi:type="AttributeExternalField">
					<extkey_attcode>ipinterface_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="ipaddress_id" xsi:type="AttributeExternalKey">
					<sql>ipaddress_id</sql>
					<target_class>IPAddress</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<jointype/>
				</field>
				<field id="usage_id" xsi:type="AttributeExternalField">
					<extkey_attcode>ipaddress_id</extkey_attcode>
					<target_attcode>usage_id</target_attcode>
				</field>
				<field id="ipaddress_org_name" xsi:type="AttributeExternalField">
					<extkey_attcode>ipaddress_id</extkey_attcode>
					<target_attcode>org_name</target_attcode>
				</field>
			</fields>
			<methods>
				<method id="AfterInsert">
				<comment/>
				<static>false</static>
				<access>public</access>
				<type>Overload-DBObject</type>
				<code><![CDATA[	public function AfterInsert()
	{
		parent::AfterInsert();
		
		$iIpId = $this->Get('ipaddress_id');
		if ($iIpId != null)
		{
			$oIP = MetaModel::GetObject('IPAddress', $iIpId, false /* MustBeFound */);
			if (!is_null($oIP))
			{
				$oIP->Set('status', 'allocated');	
				$oIP->DBUpdate();
			}
		}
	}]]></code>
				</method>
				<method id="AfterDelete">
					<comment/>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function OnDelete()
	{
		parent::AfterDelete();
		
		$iIpIntId = $this->Get('ipinterface_id');
		$iIpId = $this->Get('ipaddress_id');
		if ($iIpId != null)
		{
			$oIP = MetaModel::GetObject('IPAddress', $iIpId, false /* MustBeFound */);
			if ($oIP != null)
			{
				if ($oIP->Get('status') == 'allocated')
				{
					// Reset status only of IP is not set on another interface
					// More complex now... I'll have to change also the method in the
					// source class
					$oIPInterfaceToIPAddressSearch = DBObjectSearch::FromOQL("SELECT lnkIPInterfaceToIPAddress AS l WHERE l.ipaddress_id = $iIpId AND l.ipinterface_id != $iIpIntId");
					$oIPInterfaceToIPAddressSet = new CMDBObjectSet($oIPInterfaceToIPAddressSearch);
					$oGenericCommInterfaceToIPAddressSearch = DBObjectSearch::FromOQL("SELECT lnkGenericCommInterfaceToIPAddress AS l WHERE l.ipaddress_id = $iIpId AND l.ipinterface_id != $iIpIntId");
					$oGenericCommInterfaceToIPAddressSet = new CMDBObjectSet($oGenericCommInterfaceToIPAddressSearch);
					if (!$oIPInterfaceToIPAddressSet->CountExceeds(0) && !$oGenericCommInterfaceToIPAddressSet->CountExceeds(0))
					{
						$oIP->Set('status', 'unassigned');
						$oIP->DBUpdate();
					}
				}
			}
		}
	}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="ipinterface_id">
							<rank>10</rank>
						</item>
						<item id="ipaddress_id">
							<rank>20</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="ipinterface_id">
							<rank>10</rank>
						</item>
						<item id="ipaddress_id">
							<rank>20</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="ipinterface_id">
							<rank>10</rank>
						</item>
						<item id="ipaddress_id">
							<rank>20</rank>
						</item>
						<item id="usage_id">
							<rank>30</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="lnkGenericCommInterfaceToVLAN" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<is_link>1</is_link>
				<category>bizmodel</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>lnkgenericcomminterfacetovlan</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="vlan_id"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="vlan_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcomminterface_id" xsi:type="AttributeExternalKey">
					<sql>genericcomminterface_id</sql>
					<target_class>GenericCommInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="genericcomminterface_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="genericcomminterface_device_id" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>connectableci_id</target_attcode>
				</field>
				<field id="genericcomminterface_device_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>connectableci_name</target_attcode>
				</field>
				<field id="vlan_id" xsi:type="AttributeExternalKey">
					<sql>vlan_id</sql>
					<target_class>VLAN</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="vlan_tag" xsi:type="AttributeExternalField">
					<extkey_attcode>vlan_id</extkey_attcode>
					<target_attcode>vlan_tag</target_attcode>
				</field>
			</fields>
			<methods/>
			<presentation>
				<details>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vlan_id">
							<rank>20</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vlan_id">
							<rank>20</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vlan_id">
							<rank>20</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="lnkGenericCommInterfaceToVRF" _delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<is_link>1</is_link>
				<category>bizmodel</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>lnkgenericcomminterfacetovrf</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<format>%1$s %2$s</format>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="vrf_id"/>
					</attributes>
				</naming>
				<display_template/>
				<icon/>
				<reconciliation>
					<attributes>
						<attribute id="genericcomminterface_id"/>
						<attribute id="vrf_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="genericcomminterface_id" xsi:type="AttributeExternalKey">
					<sql>genericcomminterface_id</sql>
					<target_class>GenericCommInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="genericcomminterface_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="genericcomminterface_device_id" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>connectableci_id</target_attcode>
				</field>
				<field id="genericcomminterface_device_name" xsi:type="AttributeExternalField">
					<extkey_attcode>genericcomminterface_id</extkey_attcode>
					<target_attcode>connectableci_name</target_attcode>
				</field>
				<field id="vrf_id" xsi:type="AttributeExternalKey">
					<sql>vrf_id</sql>
					<target_class>VRF</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="vrf_name" xsi:type="AttributeExternalField">
					<extkey_attcode>vrf_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<methods/>
			<presentation>
				<details>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vrf_id">
							<rank>20</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vrf_id">
							<rank>20</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="genericcomminterface_id">
							<rank>10</rank>
						</item>
						<item id="vrf_id">
							<rank>20</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="VLAN" _delta="must_exist">
			<fields>
				<field id="genericcomminterfaces_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkGenericCommInterfaceToVLAN</linked_class>
					<ext_key_to_me>vlan_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>genericcomminterface_id</ext_key_to_remote>
					<duplicates/>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="genericcomminterfaces_list" _delta="define">
							<rank>62</rank>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="VRF" _delta="must_exist">
			<fields>
				<field id="genericcomminterfaces_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkGenericCommInterfaceToVRF</linked_class>
					<ext_key_to_me>vrf_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>genericcomminterface_id</ext_key_to_remote>
					<duplicates/>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="genericcomminterfaces_list" _delta="define">
							<rank>62</rank>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="GenericCommInterface" _delta="must_exist">
			<fields>
				<field id="ip_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkGenericCommInterfaceToIPAddress</linked_class>
					<ext_key_to_me>ipinterface_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>ipaddress_id</ext_key_to_remote>
					<duplicates/>
				</field>
				<field id="vlans_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkGenericCommInterfaceToVLAN</linked_class>
					<ext_key_to_me>genericcomminterface_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>vlan_id</ext_key_to_remote>
					<duplicates/>
				</field>
				<field id="vrfs_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
					<linked_class>lnkGenericCommInterfaceToVRF</linked_class>
					<ext_key_to_me>genericcomminterface_id</ext_key_to_me>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<ext_key_to_remote>vrf_id</ext_key_to_remote>
					<duplicates/>
				</field>
			</fields>
			<methods>
				<method id="GetAttributeParams" _delta="define">
					<comment>/**&#13;
					* Provides attributes' parameters &#13;
					*/</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function GetAttributeParams($sAttCode)
	{
		if ($sAttCode == 'physicaladdress')
		{
			$oObject = null;
			$sClass = get_class($this);
			if (MetaModel::IsValidAttCode($sClass, 'connectableci_id'))
			{
				$iConnectableCIId = $this->Get('connectableci_id');
				$oObject = MetaModel::GetObject('ConnectableCI', $iConnectableCIId, false /* MustBeFound */);
			}
			else if (MetaModel::IsValidAttCode($sClass, 'virtualmachine_id'))
			{
				$iVirtualMachineId = $this->Get('virtualmachine_id');
				$oObject = MetaModel::GetObject('VirtualMachine', $iVirtualMachineId, false /* MustBeFound */);
			}
			if ($oObject != null)
			{
				$iOrgId = $oObject->Get('org_id');
				if ($iOrgId != null)
				{
					return(IPConfig::GetFromGlobalIPConfig('mac_address_format', $iOrgId));
				}
			}
			return('colons');
		}
		return '';
	}]]></code>
				</method>
			</methods>
		</class>
		<class id="GenericCommPhysInterface" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="vlans_list">
							<rank>120</rank>
						</item>
						<item id="vrfs_list">
							<rank>130</rank>
						</item>
						<item id="ip_list" _delta="define">
							<rank>140</rank>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="GenericCommVirtInterface" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="vlans_list">
							<rank>120</rank>
						</item>
						<item id="vrfs_list">
							<rank>130</rank>
						</item>
						<item id="ip_list" _delta="define">
							<rank>140</rank>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="ManagementModule" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="col:col1">
							<rank>120</rank>
							<items>
								<item id="fieldset:Server:moreinfo">
									<rank>20</rank>
									<items>
										<item id="managementip" _delta="delete"/>
										<item id="managementip_id" _delta="define">
											<rank>45</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="managementip" _delta="delete"/>
						<item id="managementip_id" _delta="define">
							<rank>55</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<class id="GenericCommDevice" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="col:col1">
							<rank>120</rank>
							<items>
								<item id="fieldset:Server:moreinfo">
									<rank>20</rank>
									<items>
										<item id="managementip" _delta="delete"/>
										<item id="managementip_id" _delta="define">
											<rank>45</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="managementip" _delta="delete"/>
						<item id="managementip_id" _delta="define">
							<rank>55</rank>
						</item>
					</items>
				</search>
			</presentation>
		</class>
		<class id="Enclosure" _delta="must_exist">
			<presentation>
				<details>
					<items>
						<item id="col:col0">
							<items>
								<item id="fieldset:Enclosure:moreinfo">
									<items>
										<item id="macaddress" _delta="define">
											<rank>42</rank>
										</item>
										<item id="ipaddress_id" _delta="define">
											<rank>44</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
						<item id="macaddress" _delta="delete"/>
						<item id="ipaddress_id" _delta="delete"/>
					</items>
				</details>
			</presentation>
		</class>
	</classes>
	<menus>
	</menus>
	<snippets>
		<snippet id="TeemIpConfigMgmtAdaptor" _delta="redefine">
			<placement>module</placement>
			<module>teemip-config-mgmt-adaptor</module>
			<rank>10</rank>
			<content><![CDATA[
/*************************************************************************************************************************
 * Plugin to handle DisplayBare methods on non TeemIp classes and impacts on IPs when a CI is created, changed or deleted
 */
class TeemIpConfigMgmtAdaptor implements iApplicationUIExtension, iApplicationObjectExtension
{
    /**
     * @param DBObject $oObject The object being displayed
     * @param WebPage $oPage The output context
     * @param boolean $bEditMode True if the edition form is being displayed
     *
     * @return void
     */
    public function OnDisplayProperties($oObject, WebPage $oPage, $bEditMode = false)
    {
    }

    /**
     * @param DBObject $oObject The object being displayed
     * @param WebPage $oPage The output context
     * @param boolean $bEditMode True if the edition form is being displayed
     *
     * @return void
     */
    public function OnDisplayRelations($oObject, WebPage $oPage, $bEditMode = false)
    {
        if ($oObject instanceof ConnectableCI)
        {
            if (!$bEditMode)
            {
                $sOQL = "SELECT lnkIPInterfaceToIPAddress AS l JOIN PhysicalInterface AS int ON l.ipinterface_id = int.id JOIN ConnectableCI AS c ON int.connectableci_id = c.id WHERE c.id = :ci_id";
                // Include also GenericComm Interfaces (PS 2021)
                $sOQLG .= "SELECT lnkGenericCommInterfaceToIPAddress AS l9 JOIN GenericCommInterface AS int ON l9.ipinterface_id = int.id JOIN ConnectableCI AS c ON int.connectableci_id = c.id WHERE c.id = :ci_id";
                $sDisplayClass = 'ConnectableCI';
                if($oObject->Get('finalclass') == 'NetworkDevice')
                {
                    $sOQL .= " UNION SELECT lnkIPInterfaceToIPAddress AS l1 JOIN NetworkDeviceVirtualInterface AS int ON l1.ipinterface_id = int.id JOIN NetworkDevice AS n ON int.networkdevice_id = n.id WHERE n.id = :ci_id";
                    $sDisplayClass = 'NetworkDevice';
                }
                if($oObject->Get('finalclass') == 'GenericCommDevice')
                {
                    $sOQLG .= " UNION SELECT lnkGenericCommInterfaceToIPAddress AS l8 JOIN GenericCommInterface AS int ON l8.ipinterface_id = int.id JOIN GenericCommDevice AS n ON int.connectableci_id = n.id WHERE n.id = :ci_id";
                    $sDisplayClass = 'GenericCommDevice';
                }
                $oLnkSet  =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL),  array(), array('ci_id' => $oObject->GetKey()));
                $oLnkSetG =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLG), array(), array('ci_id' => $oObject->GetKey()));
                if ($oLnkSet->CountExceeds(0) || $oLnkSetG->CountExceeds(0))
                {
                    $iIPs = $oLnkSet->Count() + $oLnkSetG->Count();
                    $oPage->SetCurrentTab(Dict::S('Class:'.$sDisplayClass.'/Tab:ipaddresses_list').' ('.$iIPs.')');
                    $oPage->p(MetaModel::GetClassIcon('IPAddress').'&nbsp;'.Dict::S('Class:'.$sDisplayClass.'/Tab:ipaddresses_list+'));
                    if ($oLnkSet->CountExceeds(0))
                    {
                        $oBlock = new DisplayBlock($oLnkSet->GetFilter(), 'list', false);
                        $oBlock->Display($oPage, 'ipint_to_ipadd', array('menu' => false, 'view_link' => false));
                    }
                    if ($oLnkSetG->CountExceeds(0))
                    {
                        $oBlock = new DisplayBlock($oLnkSetG->GetFilter(), 'list', false);
                        $oBlock->Display($oPage, 'gencommint_to_ipadd', array('menu' => false, 'view_link' => false));
                    }
                }
                else
                {
                    $oPage->SetCurrentTab(Dict::S('Class:'.$sDisplayClass.'/Tab:ipaddresses_list'));
                    $oPage->p(MetaModel::GetClassIcon('IPAddress').'&nbsp;'.Dict::S('UI:NoObjectToDisplay'));
                }
            }
        }
        elseif ($oObject instanceof VLAN)
        {
            if (!$bEditMode)
            {
                $iVLANId = $oObject->GetKey();

                $sOQL = "SELECT lnkIPInterfaceToIPAddress AS l1 JOIN IPInterface AS int ON l1.ipinterface_id = int.id JOIN lnkPhysicalInterfaceToVLAN AS l2 ON l2.physicalinterface_id = int.id JOIN VLAN AS v ON l2.vlan_id = v.id WHERE v.id = :vlan_id";
                if(class_exists('LogicalInterface'))
                {
                    $sOQL .= " UNION SELECT lnkIPInterfaceToIPAddress AS l1 JOIN IPInterface AS int ON l1.ipinterface_id = int.id JOIN lnkLogicalInterfaceToVLAN AS l2 ON l2.logicalinterface_id = int.id JOIN VLAN AS v ON l2.vlan_id = v.id WHERE v.id = :vlan_id";
                }
				// Generic Comm Interfaces too
				$iLnkSetG = 0;
                if(class_exists('GenericCommInterface'))
                {
                    $sOQLG = "SELECT lnkGenericCommInterfaceToIPAddress AS l1 JOIN GenericCommInterface AS int ON l1.ipinterface_id = int.id JOIN lnkGenericCommInterfaceToVLAN AS l2 ON l2.genericcomminterface_id = int.id JOIN VLAN AS v ON l2.vlan_id = v.id WHERE v.id = :vlan_id";
					$oLnkSetG =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLG), array(), array('vlan_id' => $iVLANId));
					$iLnkSetG = $oLnkSetG->Count();
                }
                $oLnkSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('vlan_id' => $iVLANId));
                $iLnkSet = $oLnkSet->Count();

                if ($iLnkSet + $iLnkSetG > 0)
                {
                    $iIPs = $oLnkSet->Count() + $iLnkSetG;
                    $oPage->SetCurrentTab(Dict::S('Class:VLAN/Tab:ipaddresses_list').' ('.$iIPs.')');
                    $oPage->p(MetaModel::GetClassIcon('IPAddress').'&nbsp;'.Dict::S('Class:VLAN/Tab:ipaddresses_list+'));
                    if ($oLnkSet->CountExceeds(0))
					{
						$oBlock = new DisplayBlock($oLnkSet->GetFilter(), 'list', false);
						$oBlock->Display($oPage, 'ipint_to_ipadd', array('menu' => false, 'view_link' => false));
					}
                    if ($iLnkSetG > 0)
					{
						$oBlock = new DisplayBlock($oLnkSetG->GetFilter(), 'list', false);
						$oBlock->Display($oPage, 'gencommint_to_ipadd', array('menu' => false, 'view_link' => false));
					}
                }
                else
                {
                    $oPage->SetCurrentTab(Dict::S('Class:VLAN/Tab:ipaddresses_list'));
                    $oPage->p(MetaModel::GetClassIcon('IPAddress').'&nbsp;'.Dict::S('UI:NoObjectToDisplay'));
                }
            }
        }
    }

    /**
     * @param DBObject $oObject The object being edited
     * @param string $sFormPrefix Prefix given to the HTML form inputs
     *
     * @return void
     */
    public function OnFormSubmit($oObject, $sFormPrefix = '')
    {
    }

    /**
     * @param string $sTempId Unique temporary identifier made of session_id and transaction_id. It identifies the object in a unique way.
     *
     * @return void
     */
    public function OnFormCancel($sTempId)
    {
    }

    /**
     * @param DBObject $oObject The object being displayed
     *
     * @return string[] desc
     */
    public function EnumUsedAttributes($oObject) // Not yet implemented
    {
    }

    /**
     * @param DBObject $oObject The object being displayed
     *
     * @return string Path of the icon, relative to the modules directory.
     */
    public function GetIcon($oObject) // Not yet implemented
    {
    }

    /**
     * @param DBObject $oObject The object being displayed
     *
     * @return integer The value representing the mood of the object
     */
    public function GetHilightClass($oObject)
    {
    }

    /**
     * @param DBObjectSet $oSet A set of persistent objects (DBObject)
     *
     * @return string[string]
     */
    public function EnumAllowedActions(DBObjectSet $oSet)
    {
    }

    public function OnIsModified($oObject)
    {
    }

    public function OnCheckToWrite($oObject)
    {
    }

    public function OnCheckToDelete($oObject)
    {
    }

    /**
     * @noinspection PhpUnhandledExceptionInspection
     */
    public function OnDBUpdate($oObject, $oChange = null)
    {
        if ($oObject instanceof FunctionalCI)
        {
            // Check if $oObject has IP Attributes
            $sCiClass = get_class($oObject);
            $aIPsOfClass = IPAddress::GetListOfIPAttributes($sCiClass);
            if (empty($aIPsOfClass))
            {
                return;
            }

            // Check if these or name have changed
            $aListChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
            $aIPAttributes = array_merge($aIPsOfClass['IPAddress'], $aIPsOfClass['IPv4Address'], $aIPsOfClass['IPv6Address']);
            $iOrgId = $oObject->Get('org_id');
            foreach ($aIPAttributes AS $key => $sIPAttribute)
            {
                $iIPId = $oObject->Get($sIPAttribute);

                // Change IPs status if IP has changed
                if (array_key_exists($sIPAttribute, $aListChanges))
                {
                    $iPreviousIPId = $aListChanges[$sIPAttribute];
                    IPAddress::SetStatusOnAttachment($iIPId, $iPreviousIPId);
                }

                // Change IPs name if name has changed or IP has changed
                if (array_key_exists($sIPAttribute, $aListChanges) || array_key_exists('name', $aListChanges))
                {
                    $iPreviousIPId = $aListChanges[$sIPAttribute];
                    $sName = $oObject->GetNameForIPAttribute($sIPAttribute);
                    IPAddress::SetShortNameOnAttachment($iOrgId, $sName, $iIPId, $iPreviousIPId);
                }
            }

            return;
        }
    }

    /**
     * @noinspection PhpUnhandledExceptionInspection
     */
    public function OnDBInsert($oObject, $oChange = null)
    {
        if ($oObject instanceof FunctionalCI)
        {
            // Check if $oObject has IP Attributes
            $sCiClass = get_class($oObject);
            $aIPsOfClass = IPAddress::GetListOfIPAttributes($sCiClass);
            if (empty($aIPsOfClass))
            {
                return;
            }

            // Check if these or name are set
            $aIPAttributes = array_merge($aIPsOfClass['IPAddress'], $aIPsOfClass['IPv4Address'], $aIPsOfClass['IPv6Address']);
            $iOrgId = $oObject->Get('org_id');
            foreach ($aIPAttributes AS $key => $sIPAttribute)
            {
                $iIPId = $oObject->Get($sIPAttribute);
                $sName = $oObject->GetNameForIPAttribute($sIPAttribute);
                if ($iIPId != 0)
                {
                    IPAddress::SetStatusOnAttachment($iIPId);
                    IPAddress::SetShortNameOnAttachment($iOrgId, $sName ,$iIPId);
                }
            }

            return;
        }
    }
    /**
     * @noinspection PhpUnhandledExceptionInspection
     */
    public function OnDBDelete($oObject, $oChange = null)
    {
        if ($oObject instanceof FunctionalCI)
        {
            // Check if $oObject has IP Attributes
            $sCiClass = get_class($oObject);
            $aIPsOfClass = IPAddress::GetListOfIPAttributes($sCiClass);
            if (empty($aIPsOfClass))
            {
                return;
            }

            // Check if these or name are set
            $aIPAttributes = array_merge($aIPsOfClass['IPAddress'], $aIPsOfClass['IPv4Address'], $aIPsOfClass['IPv6Address']);
            foreach ($aIPAttributes AS $key => $sIPAttribute)
            {
                $iIPId = $oObject->Get($sIPAttribute);
                if ($iIPId != 0)
                {
                    IPAddress::SetStatusOnDetachment($iIPId);
                    IPAddress::SetShortNameOnDetachment($iIPId);
                }
            }

            return;
        }
    }
}]]>
			</content>
		</snippet>
	</snippets>
	<user_rights>
		<groups>
		</groups>
		<profiles>
		</profiles>
	</user_rights>
</itop_design>
